#!/usr/bin/env python3

import json
import os
import pathlib
import shutil
import subprocess
from argparse import ArgumentParser
from contextlib import closing
from tempfile import TemporaryDirectory, NamedTemporaryFile
from typing import List
from urllib.parse import quote
from urllib.request import urlopen

OFFICIAL_AUR_URL = 'https://aur.archlinux.org'


def info_url(packages: List[str], server: str = OFFICIAL_AUR_URL) -> str:
    return server + '/rpc/?v=5&type=info&' + '&'.join(['arg[]={}'.format(quote(x)) for x in packages])


def search_url(package: str, server: str = OFFICIAL_AUR_URL) -> str:
    return server + '/rpc/?v=5&type=search&arg={}'.format(quote(package))


def query(url: str):
    with closing(urlopen(url)) as request:
        return json.loads(request.read().decode())


def do_getpkgbuild(packages: List[str], directory: str) -> None:
    query_result = query(info_url(packages))
    if query_result['resultcount'] != len(packages):
        missing = set(packages) - {i['Name'] for i in query_result['results']}
        converted = [f'"{i}"' for i in missing]
        print(f'{", ".join(converted)} not found')
    with TemporaryDirectory() as temp_dir:
        for package in query_result['results']:
            with NamedTemporaryFile(dir=temp_dir) as t:
                with closing(urlopen(OFFICIAL_AUR_URL + package['URLPath'])) as request:
                    t.write(request.read())
                    t.flush()
                subprocess.run(['tar', 'xvf', t.name, '-C', temp_dir],
                               stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)

        output_directory = directory if directory else os.getcwd()
        path = pathlib.Path(temp_dir)
        gen = (x for x in path.iterdir() if x.is_dir())
        for d in gen:
            destination = shutil.move(str(d), output_directory)
            print(f'Saved to {destination}')


def do_sync_search(packages: List[str]) -> None:
    # TODO: Pretty output
    # TODO: concurrent query
    query_results = [query(search_url(package)) for package in packages]
    for r in query_results:
        print(json.dumps(r, indent=4))


def main() -> None:
    parser = ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--sync', '-S', action='store_true')
    group.add_argument('--getpkgbuild', '-G', action='store_true')
    parser.add_argument('package', nargs='+')
    parser.add_argument('--directory', '-d', default='')
    parser.add_argument('--search', '-s', action='store_true')
    args = parser.parse_args()

    if args.sync and args.search:
        do_sync_search(args.package)
    elif args.getpkgbuild:
        do_getpkgbuild(args.package, args.directory)


if __name__ == '__main__':
    main()
