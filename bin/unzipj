#!/usr/bin/env python3

import os
import pathlib
import shutil
import typing
from argparse import ArgumentParser
from tempfile import TemporaryDirectory
from zipfile import ZipFile, ZipInfo

AVAILABLE_CODECS: typing.List[str] = ['cp932', 'shift_jis', 'utf_8', 'euc_jp', 'eucjp', 'shiftjis', 'sjis', 'utf8']

# if this bit is set filename is encoded with UTF-8
# See https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT
# 4.4.4 general purpose bit flag
# or CPython's zipfile implementation
LANGUAGE_ENCODING_FLAG: int = (1 << 11)


class AnsiColors:
    RESET: str = '\033[0m'
    RED: str = '\033[91m'


def print_error(s: str, **kwargs) -> None:
    print(f'{AnsiColors.RED}{s}{AnsiColors.RESET}', **kwargs)


class CodecList(list):
    def __init__(self, xs: typing.List[str]) -> None:
        super().__init__(xs)

    @staticmethod
    def normalize(s: str) -> str:
        return s.translate(str.maketrans('-', '_')).lower()

    def __contains__(self, item: str) -> bool:
        normalized = CodecList.normalize(item)
        return super().__contains__(normalized)


def is_filename_utf_8_encoded(zip_info: ZipInfo) -> bool:
    return zip_info.flag_bits & LANGUAGE_ENCODING_FLAG


def unzip(working_dir: str, zip_file: ZipFile, out_dir_path: pathlib.Path, encoding: str) -> None:
    infolist_: typing.List[ZipInfo] = zip_file.infolist()
    print_utf_8_warning = False
    for i in infolist_:
        if not print_utf_8_warning and is_filename_utf_8_encoded(i):
            print_error('warning: The language encoding flag is set so filename encoding is UTF-8.'
                        ' We recommend use normal unzip utility to extract from this archive.')
            print_utf_8_warning = True
        if not is_filename_utf_8_encoded(i):
            # See CPython's zipfile implementation
            # filename is always decoded as 'cp437' except language encoding bit is set
            binary_filename = i.filename.encode('cp437')
            i.filename = binary_filename.decode(encoding)
        print(f'unzipping {i.filename}')
        extracted_path = zip_file.extract(i, path=working_dir)
        destination_path = out_dir_path.absolute() / i.filename
        if destination_path.exists():
            print_error(f"'{destination_path}' is already exists. skipping...")
        else:
            destination_path.parent.mkdir(parents=True, exist_ok=True)
            shutil.move(extracted_path, str(destination_path))


def do_unzip(file: str, encoding: str, output_directory: typing.Optional[str]) -> None:
    out_dir_path = pathlib.Path(os.getcwd() if not output_directory else output_directory)
    if out_dir_path.exists():
        if not out_dir_path.is_dir():
            raise FileExistsError
    else:
        out_dir_path.mkdir()
    with TemporaryDirectory() as temp_dir_path:
        with ZipFile(file) as zip_file:
            unzip(temp_dir_path, zip_file, out_dir_path, encoding)


def do_list(file: str, encoding: str) -> None:
    with ZipFile(file) as zip_file:
        infolist_: typing.List[ZipInfo] = zip_file.infolist()
        for i in infolist_:
            if not is_filename_utf_8_encoded(i):
                binary_filename = i.filename.encode('cp437')
                i.filename = binary_filename.decode(encoding)
            print(i.filename)


def build_parser() -> ArgumentParser:
    parser = ArgumentParser()
    parser.add_argument('file')
    parser.add_argument('-o', '--out', help='output directory', default=None)
    parser.add_argument('-e', '--encoding', help='filename encoding', default='cp932',
                        choices=CodecList(AVAILABLE_CODECS))
    parser.add_argument('-l', '--list', help='print file list of archive', action='store_true')
    return parser


def main() -> None:
    parser = build_parser()
    args = parser.parse_args()
    if args.list:
        do_list(args.file, args.encoding)
    else:
        do_unzip(args.file, args.encoding, args.out)


if __name__ == '__main__':
    main()
